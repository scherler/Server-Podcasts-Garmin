{"version":3,"file":"PodcastRelay.js","sourceRoot":"","sources":["../../src/PodcastRelay.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, html, css } from 'lit';\nimport { property, state } from 'lit/decorators.js';\nimport { repeat } from 'lit/directives/repeat.js';\n\n// eslint-disable-next-line import/extensions\nimport { getHeaders, token } from './util/tokens';\n\nconst logo = new URL('../../assets/open-wc-logo.svg', import.meta.url).href;\n\nexport class PodcastRelay extends LitElement {\n  @property({ type: String }) backendUrl =\n    'https://podcast-relay.herokuapp.com';\n\n  static styles = css`\n    :host {\n      min-height: 100vh;\n      display: flex;\n      flex-direction: column;\n      align-items: center;\n      justify-content: flex-start;\n      font-size: calc(10px + 2vmin);\n      color: #1a2b42;\n      max-width: 960px;\n      margin: 0 auto;\n      text-align: center;\n      background-color: var(--podcast-relay-background-color);\n    }\n\n    main {\n      flex-grow: 1;\n    }\n\n    .logo {\n      margin-top: 36px;\n      animation: app-logo-spin infinite 20s linear;\n    }\n\n    @keyframes app-logo-spin {\n      from {\n        transform: rotate(0deg);\n      }\n      to {\n        transform: rotate(360deg);\n      }\n    }\n\n    .app-footer {\n      font-size: calc(12px + 0.5vmin);\n      align-items: center;\n    }\n\n    .app-footer a {\n      margin-left: 5px;\n    }\n  `;\n\n  fetchPodcasts = async () => {\n    const headers = getHeaders();\n    return fetch(`${this.backendUrl}/podcast`, { headers }).then(resp => {\n      if (resp.status === 200) {\n        resp.json().then(data => {\n          this.content = data;\n          console.log('dat', this.content);\n        });\n      }\n    });\n  };\n\n  connect(event: any) {\n    event.preventDefault();\n    const form = this.shadowRoot?.getElementById('form_login');\n    if (form) {\n      const oData = new FormData(form as HTMLFormElement);\n      const headers = new Headers();\n      headers.append('Accept', 'application/json');\n      const request = new Request(`${this.backendUrl}/connect`, {\n        headers,\n        method: 'POST',\n        body: oData,\n      });\n      fetch(request).then(response => {\n        if (response.status === 200) {\n          response.json().then(data => {\n            const { token: sessionToken } = data;\n            document.cookie = `session=${sessionToken}`;\n            this.fetchPodcasts();\n          });\n        }\n      });\n    }\n  }\n\n  @state()\n  private content: any[] | undefined;\n\n  render() {\n    if (token !== '' && !this.content) {\n      this.fetchPodcasts();\n    }\n    const answer = html`\n      <main>\n        ${token === ''\n          ? html`<h1>Login</h1>\n        <p>\n          <label class=\"error\" style=\"display: none\">\n              Error in login or password\n          </label>\n          <form\n            @submit=${this.connect}\n            enctype=\"multipart/form-data\" method=\"POST\" id=\"form_login\">\n              <div class=\"login\">\n                  <label for=\"login\">\n                      <b>Login</b>\n                  </label>\n                  <input type=\"text\" placeholder=\"Enter Username\" name=\"login\" required>\n              </div>\n              <div class=\"psw\">\n                  <label for=\"psw\">\n                      <b>Password</b>\n                  </label>\n                  <input type=\"password\" placeholder=\"Enter Password\" name=\"password\" required>\n              </div>\n              <div>\n                  <button type=\"submit\">Connect</button>\n              </div>\n          </form>\n        </p>`\n          : html`\n              ${this.content\n                ? repeat(\n                    this.content,\n                    podcast => html`\n                      <article>\n                        <h3>${podcast.title}</h3>\n                        <div class=\"flex justify-center\">\n                          <img\n                            alt=\"podcast logo\"\n                            ${podcast.image_url}\n                            style=\"width:100px;height:100px;\"\n                          />\n                          <small> ${podcast.description} </small>\n                        </div>\n                      </article>\n                    `\n                  )\n                : html`<div class=\"logo\">\n                    <img alt=\"open-wc logo\" src=${logo} />\n                  </div>`}\n            `}\n      </main>\n    `;\n\n    return answer;\n  }\n}\n"]}